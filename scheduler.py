import schedule
import time
from threading import Thread
from database import get_user_preferences
from telegram import TelegramBot
from database import get_all_user_ids
import random
import asyncio

def send_monthly_progress_request():
    bot = TelegramBot()
    user_ids = get_all_user_ids()  # Fun√ß√£o que busca todos os IDs de usu√°rios

    for user_id in user_ids:
        bot.app.send_message(user_id, "Ol√°! Estamos no fim do m√™s e gostar√≠amos de saber como foi seu progresso. Por favor, responda com seu peso atual e qualquer outro coment√°rio sobre sua evolu√ß√£o."
                                        "Por favor, utilize o comando /atualizar_progresso para enviar seu peso atual e qualquer outro coment√°rio sobre sua evolu√ß√£o.")
def start_scheduler():
    # Envio di√°rio
    schedule.every().day.at("08:00").do(send_daily_messages)

    # Envio mensal (√∫ltimo dia do m√™s)
    schedule.every().month.at("08:00").do(send_monthly_progress_request)

    # Envio di√°rio das dicas √†s 8h
    schedule.every().day.at("08:00").do(send_daily_tip)

    while True:
        schedule.run_pending()
        time.sleep(60)

# Fun√ß√£o que envia a mensagem di√°ria de acordo com as metas do cliente
def send_daily_messages():
    bot = TelegramBot()
    user_ids = [user.user_id for user in get_all_user_ids()]  # Pega todos os IDs de usu√°rios no banco
    
    for user_id in user_ids:
        preferences = get_user_preferences(user_id)
        message = f"Ol√°! Aqui est√£o algumas dicas para alcan√ßar seu objetivo de {preferences.goal}. Lembre-se de seguir seu plano alimentar e se manter hidratado!"
        bot.app.send_message(user_id, message)  # Envia a mensagem para cada usu√°rio

def start_scheduler():
     # Envio di√°rio
    schedule.every().day.at("08:00").do(send_daily_messages)

    # Envio do desafio mensal no primeiro dia de cada m√™s
    schedule.every().month.at("08:00").do(send_monthly_challenge)
    
    # Envio do relat√≥rio mensal no √∫ltimo dia do m√™s
    schedule.every().month.at("08:00").do(send_monthly_report)

    while True:
        schedule.run_pending()
        time.sleep(60)
    
challenges = [
    {"title": "Beber mais √°gua", "description": "Beba pelo menos 8 copos de √°gua por dia para melhorar sua hidrata√ß√£o e disposi√ß√£o."},
    {"title": "Aumentar ingest√£o de fibras", "description": "Inclua frutas, verduras e gr√£os integrais nas refei√ß√µes para melhorar sua digest√£o."},
    {"title": "Reduzir o consumo de a√ß√∫car", "description": "Tente evitar alimentos com alto teor de a√ß√∫car e escolha op√ß√µes mais saud√°veis."},
    {"title": "Praticar exerc√≠cios leves diariamente", "description": "Realize 30 minutos de caminhada ou outra atividade f√≠sica leve todos os dias."},
    # Adicione mais desafios se desejar
]

def get_monthly_challenge():
    return random.choice(challenges)

def send_monthly_challenge():
    bot = TelegramBot()
    user_ids = get_all_user_ids()  # Fun√ß√£o que busca todos os IDs de usu√°rios
    challenge = get_monthly_challenge()

    for user_id in user_ids:
        bot.app.send_message(
            user_id,
            f"Desafio do M√™s: {challenge['title']}\n\n{challenge['description']}\n\n"
            "Este √© o seu desafio para o m√™s! Use o comando /progresso_desafio para compartilhar seu progresso sempre que quiser."
        )

def send_monthly_report():
    bot = TelegramBot()
    user_ids = get_all_user_ids()  # Fun√ß√£o que busca todos os IDs de usu√°rios

    for user_id in user_ids:
        report = asyncio.run(bot.generate_monthly_report(user_id))
        bot.app.send_message(
            user_id,
            report
        )
        

daily_tips = {
    "perda de peso": [
        "Para o caf√© da manh√£, tente incluir alimentos ricos em fibras, como aveia e frutas.",
        "Beba √°gua antes das refei√ß√µes para ajudar na saciedade.",
        "Evite bebidas a√ßucaradas e prefira sucos naturais ou √°gua saborizada.",
        "Para o jantar, escolha uma refei√ß√£o leve, como salada com prote√≠nas magras."
    ],
    "ganho de massa": [
        "Inclua uma boa fonte de prote√≠na em cada refei√ß√£o, como ovos, frango ou peixe.",
        "Para o caf√© da manh√£, experimente um smoothie de frutas com whey protein.",
        "Ap√≥s os treinos, consuma uma refei√ß√£o rica em carboidratos e prote√≠nas.",
        "Lanches com pasta de amendoim e aveia s√£o √≥timos para ganho de massa."
    ],
    "manuten√ß√£o": [
        "Mantenha uma dieta equilibrada com frutas, vegetais e prote√≠nas em cada refei√ß√£o.",
        "Beba √°gua regularmente ao longo do dia para manter a hidrata√ß√£o.",
        "Inclua lanches saud√°veis, como iogurte com frutas ou castanhas.",
        "Para o almo√ßo, escolha uma por√ß√£o de carboidratos integrais, prote√≠nas e salada."
    ]
}

# scheduler.py

def send_daily_tip():
    bot = TelegramBot()
    user_ids = get_all_user_ids()

    for user_id in user_ids:
        preferences = get_user_preferences(user_id)
        if preferences and preferences.goal:
            tips = daily_tips.get(preferences.goal.lower(), [])
            if tips:
                tip = random.choice(tips)
                bot.app.send_message(
                    user_id,
                    f"Bom dia! üåû Aqui est√° uma dica para {preferences.goal}:\n\n{tip}"
                )

# Inicia o agendador em uma nova thread
scheduler_thread = Thread(target=start_scheduler)
scheduler_thread.start()
